// Code generated by protoc-gen-go-xhttp. DO NOT EDIT.
// versions:
// protoc-gen-go-xhttp v1.0.0

package v1

import (
	context "context"
	middleware "github.com/go-kratos/kratos/v2/middleware"
	transport "github.com/go-kratos/kratos/v2/transport"
	xhttp "github.com/go-kratos/kratos/v2/transport/xhttp"
	apistate "github.com/go-kratos/kratos/v2/transport/xhttp/apistate"
	binding "github.com/go-kratos/kratos/v2/transport/xhttp/binding"
)

import fiber "github.com/gofiber/fiber/v2"

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.BindBody

const _ = xhttp.SupportPackageIsVersion1
const _ = middleware.SupportPackageIsVersion1
const _ = transport.KindXHTTP

var _ = new(apistate.Resp[any])

// 公共接口
type PubXHTTPServer interface {
	Generate(context.Context, *EmptyRequest) (*CaptchaReply, error)
	Login(context.Context, *LoginRequest) (*LoginReply, error)
	Logout(context.Context, *EmptyRequest) (*EmptyReply, error)
	Register(context.Context, *RegisterRequest) (*RegisterReply, error)
	RetrievePwd(context.Context, *RetrieveRequest) (*EmptyReply, error)
	UploadFile(context.Context, *EmptyRequest) (*UploadReply, error)
}

func RegisterPubXHTTPServer(s *xhttp.Server, srv PubXHTTPServer) {
	s.Route(func(r fiber.Router) {
		api := r.Group("api/system/v1/pub")
		// Register all service annotation
		{
			api.Name("Pub-XHTTPServer")
		}
		api.Get("/captcha", _Pub_Generate0_XHTTP_Handler(srv)).Name("Pub-Generate.0-XHTTP_Handler")
		api.Post("/register", _Pub_Register0_XHTTP_Handler(srv)).Name("Pub-Register.0-XHTTP_Handler")
		api.Post("/login", _Pub_Login0_XHTTP_Handler(srv)).Name("Pub-Login.0-XHTTP_Handler")
		api.Post("/logout",
			middleware.Authenticator(), middleware.Authorizer(),
			_Pub_Logout0_XHTTP_Handler(srv)).Name("Pub-Logout.0-XHTTP_Handler")
		api.Post("/retrieve", _Pub_RetrievePwd0_XHTTP_Handler(srv)).Name("Pub-RetrievePwd.0-XHTTP_Handler")
		api.Post("/upload", _Pub_UploadFile0_XHTTP_Handler(srv)).Name("Pub-UploadFile.0-XHTTP_Handler")
	})
}

func _Pub_Generate0_XHTTP_Handler(srv PubXHTTPServer) fiber.Handler {
	return func(c *fiber.Ctx) error {
		var in EmptyRequest
		if err := binding.BindQuery(c, &in); err != nil {
			return apistate.Error[any]().WithError(err).Send(c)
		}
		ctx := transport.NewFiberContext(context.Background(), c)
		reply, err := srv.Generate(ctx, &in)
		if err != nil {
			return apistate.Error[any]().WithError(err).Send(c)
		}
		return apistate.Success[*CaptchaReply]().WithData(reply).Send(c)
	}
}

func _Pub_Register0_XHTTP_Handler(srv PubXHTTPServer) fiber.Handler {
	return func(c *fiber.Ctx) error {
		var in RegisterRequest
		if err := binding.BindBody(c, &in); err != nil {
			return apistate.Error[any]().WithError(err).Send(c)
		}
		ctx := transport.NewFiberContext(context.Background(), c)
		reply, err := srv.Register(ctx, &in)
		if err != nil {
			return apistate.Error[any]().WithError(err).Send(c)
		}
		return apistate.Success[*RegisterReply]().WithData(reply).Send(c)
	}
}

func _Pub_Login0_XHTTP_Handler(srv PubXHTTPServer) fiber.Handler {
	return func(c *fiber.Ctx) error {
		var in LoginRequest
		if err := binding.BindBody(c, &in); err != nil {
			return apistate.Error[any]().WithError(err).Send(c)
		}
		ctx := transport.NewFiberContext(context.Background(), c)
		reply, err := srv.Login(ctx, &in)
		if err != nil {
			return apistate.Error[any]().WithError(err).Send(c)
		}
		return apistate.Success[*LoginReply]().WithData(reply).Send(c)
	}
}

func _Pub_Logout0_XHTTP_Handler(srv PubXHTTPServer) fiber.Handler {
	return func(c *fiber.Ctx) error {
		var in EmptyRequest
		if err := binding.BindQuery(c, &in); err != nil {
			return apistate.Error[any]().WithError(err).Send(c)
		}
		ctx := transport.NewFiberContext(context.Background(), c)
		reply, err := srv.Logout(ctx, &in)
		if err != nil {
			return apistate.Error[any]().WithError(err).Send(c)
		}
		return apistate.Success[*EmptyReply]().WithData(reply).Send(c)
	}
}

func _Pub_RetrievePwd0_XHTTP_Handler(srv PubXHTTPServer) fiber.Handler {
	return func(c *fiber.Ctx) error {
		var in RetrieveRequest
		if err := binding.BindBody(c, &in); err != nil {
			return apistate.Error[any]().WithError(err).Send(c)
		}
		ctx := transport.NewFiberContext(context.Background(), c)
		reply, err := srv.RetrievePwd(ctx, &in)
		if err != nil {
			return apistate.Error[any]().WithError(err).Send(c)
		}
		return apistate.Success[*EmptyReply]().WithData(reply).Send(c)
	}
}

func _Pub_UploadFile0_XHTTP_Handler(srv PubXHTTPServer) fiber.Handler {
	return func(c *fiber.Ctx) error {
		var in EmptyRequest
		if err := binding.BindBody(c, &in); err != nil {
			return apistate.Error[any]().WithError(err).Send(c)
		}
		ctx := transport.NewFiberContext(context.Background(), c)
		reply, err := srv.UploadFile(ctx, &in)
		if err != nil {
			return apistate.Error[any]().WithError(err).Send(c)
		}
		return apistate.Success[*UploadReply]().WithData(reply).Send(c)
	}
}
