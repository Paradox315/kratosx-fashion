// Code generated by protoc-gen-go-xhttp. DO NOT EDIT.
// versions:
// protoc-gen-go-xhttp v1.0.0

package v1

import (
	context "context"
	middleware "github.com/go-kratos/kratos/v2/middleware"
	transport "github.com/go-kratos/kratos/v2/transport"
	xhttp "github.com/go-kratos/kratos/v2/transport/xhttp"
	apistate "github.com/go-kratos/kratos/v2/transport/xhttp/apistate"
	binding "github.com/go-kratos/kratos/v2/transport/xhttp/binding"
)

import fiber "github.com/gofiber/fiber/v2"

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.BindBody

const _ = xhttp.SupportPackageIsVersion1
const _ = middleware.SupportPackageIsVersion1
const _ = transport.KindXHTTP

var _ = new(apistate.Resp)

// 菜单服务
type ResourceXHTTPServer interface {
	CreateMenu(context.Context, *MenuRequest) (*IDReply, error)
	DeleteMenu(context.Context, *IDsRequest) (*EmptyReply, error)
	GetMenuTree(context.Context, *IDRequest) (*MenuReply, error)
	GetMenuTreeByRole(context.Context, *IDRequest) (*MenuReply, error)
	GetRouteTree(context.Context, *EmptyRequest) (*RouterReply, error)
	UpdateMenu(context.Context, *MenuRequest) (*IDReply, error)
}

func RegisterResourceXHTTPServer(s *xhttp.Server, srv ResourceXHTTPServer) {
	s.Route(func(r fiber.Router) {
		api := r.Group("api/system/v1/resource")
		// Register all service annotation
		{
			api.Use(middleware.Authenticator(), middleware.Authorizer())
		}
		api.Post("/menu", _Resource_CreateMenu0_XHTTP_Handler(srv))
		api.Put("/menu", _Resource_UpdateMenu0_XHTTP_Handler(srv))
		api.Delete("/menus/:ids", _Resource_DeleteMenu0_XHTTP_Handler(srv))
		api.Get("/menu/tree/:id", _Resource_GetMenuTree0_XHTTP_Handler(srv))
		api.Get("/menu/tree/role/:id", _Resource_GetMenuTreeByRole0_XHTTP_Handler(srv))
		api.Get("/router", _Resource_GetRouteTree0_XHTTP_Handler(srv))
	})
}

//
func _Resource_CreateMenu0_XHTTP_Handler(srv ResourceXHTTPServer) fiber.Handler {
	return func(c *fiber.Ctx) error {
		var in MenuRequest
		if err := binding.BindBody(c, &in); err != nil {
			return apistate.Error().WithError(err).Send(c)
		}
		ctx := transport.NewFiberContext(context.Background(), c)
		reply, err := srv.CreateMenu(ctx, &in)
		if err != nil {
			return apistate.Error().WithError(err).Send(c)
		}
		return apistate.Success().WithData(reply).Send(c)
	}
}

//
func _Resource_UpdateMenu0_XHTTP_Handler(srv ResourceXHTTPServer) fiber.Handler {
	return func(c *fiber.Ctx) error {
		var in MenuRequest
		if err := binding.BindBody(c, &in); err != nil {
			return apistate.Error().WithError(err).Send(c)
		}
		ctx := transport.NewFiberContext(context.Background(), c)
		reply, err := srv.UpdateMenu(ctx, &in)
		if err != nil {
			return apistate.Error().WithError(err).Send(c)
		}
		return apistate.Success().WithData(reply).Send(c)
	}
}

//
func _Resource_DeleteMenu0_XHTTP_Handler(srv ResourceXHTTPServer) fiber.Handler {
	return func(c *fiber.Ctx) error {
		var in IDsRequest
		if err := binding.BindParams(c, &in); err != nil {
			return apistate.Error().WithError(err).Send(c)
		}
		ctx := transport.NewFiberContext(context.Background(), c)
		reply, err := srv.DeleteMenu(ctx, &in)
		if err != nil {
			return apistate.Error().WithError(err).Send(c)
		}
		return apistate.Success().WithData(reply).Send(c)
	}
}

//
func _Resource_GetMenuTree0_XHTTP_Handler(srv ResourceXHTTPServer) fiber.Handler {
	return func(c *fiber.Ctx) error {
		var in IDRequest
		if err := binding.BindParams(c, &in); err != nil {
			return apistate.Error().WithError(err).Send(c)
		}
		ctx := transport.NewFiberContext(context.Background(), c)
		reply, err := srv.GetMenuTree(ctx, &in)
		if err != nil {
			return apistate.Error().WithError(err).Send(c)
		}
		return apistate.Success().WithData(reply).Send(c)
	}
}

//
func _Resource_GetMenuTreeByRole0_XHTTP_Handler(srv ResourceXHTTPServer) fiber.Handler {
	return func(c *fiber.Ctx) error {
		var in IDRequest
		if err := binding.BindParams(c, &in); err != nil {
			return apistate.Error().WithError(err).Send(c)
		}
		ctx := transport.NewFiberContext(context.Background(), c)
		reply, err := srv.GetMenuTreeByRole(ctx, &in)
		if err != nil {
			return apistate.Error().WithError(err).Send(c)
		}
		return apistate.Success().WithData(reply).Send(c)
	}
}

//
func _Resource_GetRouteTree0_XHTTP_Handler(srv ResourceXHTTPServer) fiber.Handler {
	return func(c *fiber.Ctx) error {
		var in EmptyRequest
		if err := binding.BindQuery(c, &in); err != nil {
			return apistate.Error().WithError(err).Send(c)
		}
		ctx := transport.NewFiberContext(context.Background(), c)
		reply, err := srv.GetRouteTree(ctx, &in)
		if err != nil {
			return apistate.Error().WithError(err).Send(c)
		}
		return apistate.Success().WithData(reply).Send(c)
	}
}
