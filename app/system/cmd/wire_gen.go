// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	biz2 "kratosx-fashion/app/fashion/biz"
	repo2 "kratosx-fashion/app/fashion/repo"
	service2 "kratosx-fashion/app/fashion/service"
	"kratosx-fashion/app/system/biz"
	"kratosx-fashion/app/system/conf"
	"kratosx-fashion/app/system/data"
	"kratosx-fashion/app/system/data/infra"
	"kratosx-fashion/app/system/data/repo"
	"kratosx-fashion/app/system/middleware"
	"kratosx-fashion/app/system/server"
	"kratosx-fashion/app/system/service"
)

// Injectors from wire.go:

// initApp init kratos application.
func initApp(confServer *conf.Server, algorithm *conf.Algorithm, storage *conf.Storage, confData *conf.Data, jwt *conf.JWT, logger *conf.Logger) (*kratos.App, func(), error) {
	logLogger := infra.NewLogger(logger)
	db := data.NewDB(confData, logLogger)
	client := data.NewRedis(confData, logLogger)
	dataData, cleanup, err := data.NewData(confData, logLogger, db, client)
	if err != nil {
		return nil, nil, err
	}
	jwtRepo := repo.NewJwtRepo(dataData, jwt, logLogger)
	userRepo := repo.NewUserRepo(dataData, logLogger)
	jwtService := middleware.NewJwtService(jwtRepo, userRepo, logLogger)
	syncedEnforcer := data.NewCasbin(confData, db, logLogger)
	casbinAuth := middleware.NewCasbinAuth(syncedEnforcer, logLogger)
	cache := middleware.NewCache()
	limiter := middleware.NewLimiter()
	ip2locationDB := data.NewIPLocationDB(confData, logLogger)
	userLogRepo := repo.NewLoginLogRepo(dataData, logLogger, ip2locationDB)
	middlewareLogger := middleware.NewLoggerHook(userLogRepo)
	globalMiddleware := middleware.NewGlobalMiddleware(logLogger)
	userRoleRepo := repo.NewUserRoleRepo(dataData, logLogger)
	captchaRepo := repo.NewCaptchaRepo(client, logLogger)
	storageStorage := infra.NewStorage(storage)
	publicUsecase := biz.NewPublicUsecase(userRepo, userRoleRepo, captchaRepo, jwtRepo, storageStorage, client, logLogger)
	pubService := service.NewPubService(publicUsecase, logLogger)
	roleRepo := repo.NewRoleRepo(dataData, logLogger)
	transaction := data.NewTransaction(dataData)
	userUsecase := biz.NewUserUsecase(jwtRepo, userRepo, userLogRepo, userRoleRepo, roleRepo, client, transaction, logLogger)
	userService := service.NewUserService(userUsecase, logLogger)
	resourceRouterRepo := repo.NewResourceRouterRepo(dataData, logLogger, syncedEnforcer)
	roleResourceRepo := repo.NewRoleResourceRepo(dataData, logLogger)
	roleUsecase := biz.NewRoleUsecase(roleRepo, userRoleRepo, resourceRouterRepo, roleResourceRepo, transaction, logLogger)
	roleService := service.NewRoleService(roleUsecase, logLogger)
	resourceMenuRepo := repo.NewResourceMenuRepo(dataData, logLogger)
	resourceUsecase := biz.NewResourceUsecase(resourceMenuRepo, resourceRouterRepo, roleResourceRepo, transaction, logLogger)
	resourceService := service.NewResourceService(resourceUsecase, logLogger)
	monitorService := service.NewMonitorService(logLogger)
	clothesRepo := repo2.NewClothesRepo(algorithm, logLogger)
	feedbackRepo := repo2.NewFeedbackRepo(algorithm, logLogger)
	clothesUsecase := biz2.NewClothesUsecase(clothesRepo, feedbackRepo, logLogger)
	clothesService := service2.NewClothesService(clothesUsecase, logLogger)
	recommendRepo := repo2.NewRecommendRepo(algorithm, logLogger)
	recommendUsecase := biz2.NewRecommendUsecase(recommendRepo, clothesRepo, logLogger)
	recommendService := service2.NewRecommendService(recommendUsecase, logLogger)
	tryOnService := service2.NewTryOnService(clothesUsecase, logLogger)
	xhttpServer := server.NewHTTPServer(confServer, jwtService, casbinAuth, cache, limiter, middlewareLogger, globalMiddleware, pubService, userService, roleService, resourceService, monitorService, clothesService, recommendService, tryOnService, logLogger)
	app := newApp(logLogger, xhttpServer)
	return app, func() {
		cleanup()
	}, nil
}
