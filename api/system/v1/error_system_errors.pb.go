// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package v1

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

func IsUserAlreadyExists(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_USER_ALREADY_EXISTS.String() && e.Code == 409
}

func ErrorUserAlreadyExists(format string, args ...interface{}) *errors.Error {
	return errors.New(409, ErrorReason_USER_ALREADY_EXISTS.String(), fmt.Sprintf(format, args...))
}

func IsUserInvalid(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_USER_INVALID.String() && e.Code == 400
}

func ErrorUserInvalid(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_USER_INVALID.String(), fmt.Sprintf(format, args...))
}

func IsEmailInvalid(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_EMAIL_INVALID.String() && e.Code == 400
}

func ErrorEmailInvalid(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_EMAIL_INVALID.String(), fmt.Sprintf(format, args...))
}

func IsEmailAlreadyExists(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_EMAIL_ALREADY_EXISTS.String() && e.Code == 409
}

func ErrorEmailAlreadyExists(format string, args ...interface{}) *errors.Error {
	return errors.New(409, ErrorReason_EMAIL_ALREADY_EXISTS.String(), fmt.Sprintf(format, args...))
}

func IsMobileInvalid(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_MOBILE_INVALID.String() && e.Code == 400
}

func ErrorMobileInvalid(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_MOBILE_INVALID.String(), fmt.Sprintf(format, args...))
}

func IsMobileAlreadyExists(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_MOBILE_ALREADY_EXISTS.String() && e.Code == 409
}

func ErrorMobileAlreadyExists(format string, args ...interface{}) *errors.Error {
	return errors.New(409, ErrorReason_MOBILE_ALREADY_EXISTS.String(), fmt.Sprintf(format, args...))
}

func IsBindFail(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_BIND_FAIL.String() && e.Code == 500
}

func ErrorBindFail(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_BIND_FAIL.String(), fmt.Sprintf(format, args...))
}

func IsPasswordInvalid(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_PASSWORD_INVALID.String() && e.Code == 400
}

func ErrorPasswordInvalid(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_PASSWORD_INVALID.String(), fmt.Sprintf(format, args...))
}

func IsPasswordNotMatch(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_PASSWORD_NOT_MATCH.String() && e.Code == 400
}

func ErrorPasswordNotMatch(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_PASSWORD_NOT_MATCH.String(), fmt.Sprintf(format, args...))
}

func IsCaptchaInvalid(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_CAPTCHA_INVALID.String() && e.Code == 400
}

func ErrorCaptchaInvalid(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_CAPTCHA_INVALID.String(), fmt.Sprintf(format, args...))
}

func IsRoleAlreadyExists(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ROLE_ALREADY_EXISTS.String() && e.Code == 409
}

func ErrorRoleAlreadyExists(format string, args ...interface{}) *errors.Error {
	return errors.New(409, ErrorReason_ROLE_ALREADY_EXISTS.String(), fmt.Sprintf(format, args...))
}

func IsRoleNotExists(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ROLE_NOT_EXISTS.String() && e.Code == 400
}

func ErrorRoleNotExists(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_ROLE_NOT_EXISTS.String(), fmt.Sprintf(format, args...))
}

func IsMenuAlreadyExists(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_MENU_ALREADY_EXISTS.String() && e.Code == 409
}

func ErrorMenuAlreadyExists(format string, args ...interface{}) *errors.Error {
	return errors.New(409, ErrorReason_MENU_ALREADY_EXISTS.String(), fmt.Sprintf(format, args...))
}

func IsMenuNotExists(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_MENU_NOT_EXISTS.String() && e.Code == 400
}

func ErrorMenuNotExists(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_MENU_NOT_EXISTS.String(), fmt.Sprintf(format, args...))
}

func IsFileUploadFail(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_FILE_UPLOAD_FAIL.String() && e.Code == 500
}

func ErrorFileUploadFail(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_FILE_UPLOAD_FAIL.String(), fmt.Sprintf(format, args...))
}

func IsFileOpenFail(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_FILE_OPEN_FAIL.String() && e.Code == 500
}

func ErrorFileOpenFail(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_FILE_OPEN_FAIL.String(), fmt.Sprintf(format, args...))
}
