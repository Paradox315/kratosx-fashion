// Code generated by protoc-gen-go-xhttp. DO NOT EDIT.
// versions:
// protoc-gen-go-xhttp v1.0.0

package v1

import (
	context "context"
	middleware "github.com/go-kratos/kratos/v2/middleware"
	xhttp "github.com/go-kratos/kratos/v2/transport/xhttp"
	apistate "github.com/go-kratos/kratos/v2/transport/xhttp/apistate"
	binding "github.com/go-kratos/kratos/v2/transport/xhttp/binding"
	"github.com/gofiber/fiber/v2"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.BindBody

const _ = xhttp.SupportPackageIsVersion1
const _ = middleware.SupportPackageIsVersion1

var _ = new(apistate.Resp)

// 菜单服务
type MenuXHTTPServer interface {
	CreateMenu(context.Context, *MenuRequest) (*IDReply, error)
	DeleteMenu(context.Context, *IDRequest) (*EmptyReply, error)
	GetMenu(context.Context, *IDRequest) (*MenuReply, error)
	GetMenuTree(context.Context, *TreeRequest) (*MenuTreeReply, error)
	ListMenu(context.Context, *ListRequest) (*ListMenuReply, error)
	UpdateMenu(context.Context, *MenuRequest) (*IDReply, error)
	UpdateMenuStatus(context.Context, *IDRequest) (*IDReply, error)
}

func RegisterMenuXHTTPServer(s *xhttp.Server, srv MenuXHTTPServer) {
	s.Route(func(r fiber.Router) {
		api := r.Group("api/api/system/v1/menu")
		// Register all service annotation
		{
			api.Use(middleware.Authenticator(), middleware.Authorizer())
		}
		api.Post("/", _Menu_CreateMenu0_XHTTP_Handler(srv))
		api.Put("/", _Menu_UpdateMenu0_XHTTP_Handler(srv))
		api.Put("/status", _Menu_UpdateMenuStatus0_XHTTP_Handler(srv))
		api.Delete("/:id", _Menu_DeleteMenu0_XHTTP_Handler(srv))
		api.Get("/:id", _Menu_GetMenu0_XHTTP_Handler(srv))
		api.Post("/list", _Menu_ListMenu0_XHTTP_Handler(srv))
		api.Get("/tree", _Menu_GetMenuTree0_XHTTP_Handler(srv))
	})
}

//
func _Menu_CreateMenu0_XHTTP_Handler(srv MenuXHTTPServer) fiber.Handler {
	return func(ctx *fiber.Ctx) error {
		var in MenuRequest
		if err := binding.BindBody(ctx, &in); err != nil {
			return err
		}
		reply, err := srv.CreateMenu(ctx.Context(), &in)
		if err != nil {
			return apistate.Error().WithError(err).Send(ctx)
		}
		return apistate.Success().WithData(reply).Send(ctx)
	}
}

//
func _Menu_UpdateMenu0_XHTTP_Handler(srv MenuXHTTPServer) fiber.Handler {
	return func(ctx *fiber.Ctx) error {
		var in MenuRequest
		if err := binding.BindBody(ctx, &in); err != nil {
			return err
		}
		reply, err := srv.UpdateMenu(ctx.Context(), &in)
		if err != nil {
			return apistate.Error().WithError(err).Send(ctx)
		}
		return apistate.Success().WithData(reply).Send(ctx)
	}
}

//
func _Menu_UpdateMenuStatus0_XHTTP_Handler(srv MenuXHTTPServer) fiber.Handler {
	return func(ctx *fiber.Ctx) error {
		var in IDRequest
		if err := binding.BindBody(ctx, &in); err != nil {
			return err
		}
		reply, err := srv.UpdateMenuStatus(ctx.Context(), &in)
		if err != nil {
			return apistate.Error().WithError(err).Send(ctx)
		}
		return apistate.Success().WithData(reply).Send(ctx)
	}
}

//
func _Menu_DeleteMenu0_XHTTP_Handler(srv MenuXHTTPServer) fiber.Handler {
	return func(ctx *fiber.Ctx) error {
		var in IDRequest
		if err := binding.BindParams(ctx, &in); err != nil {
			return err
		}
		reply, err := srv.DeleteMenu(ctx.Context(), &in)
		if err != nil {
			return apistate.Error().WithError(err).Send(ctx)
		}
		return apistate.Success().WithData(reply).Send(ctx)
	}
}

//
func _Menu_GetMenu0_XHTTP_Handler(srv MenuXHTTPServer) fiber.Handler {
	return func(ctx *fiber.Ctx) error {
		var in IDRequest
		if err := binding.BindParams(ctx, &in); err != nil {
			return err
		}
		reply, err := srv.GetMenu(ctx.Context(), &in)
		if err != nil {
			return apistate.Error().WithError(err).Send(ctx)
		}
		return apistate.Success().WithData(reply).Send(ctx)
	}
}

//
func _Menu_ListMenu0_XHTTP_Handler(srv MenuXHTTPServer) fiber.Handler {
	return func(ctx *fiber.Ctx) error {
		var in ListRequest
		if err := binding.BindBody(ctx, &in); err != nil {
			return err
		}
		reply, err := srv.ListMenu(ctx.Context(), &in)
		if err != nil {
			return apistate.Error().WithError(err).Send(ctx)
		}
		return apistate.Success().WithData(reply).Send(ctx)
	}
}

//
func _Menu_GetMenuTree0_XHTTP_Handler(srv MenuXHTTPServer) fiber.Handler {
	return func(ctx *fiber.Ctx) error {
		var in TreeRequest
		if err := binding.BindQuery(ctx, &in); err != nil {
			return err
		}
		reply, err := srv.GetMenuTree(ctx.Context(), &in)
		if err != nil {
			return apistate.Error().WithError(err).Send(ctx)
		}
		return apistate.Success().WithData(reply).Send(ctx)
	}
}
