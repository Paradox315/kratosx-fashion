// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"kratosx-fashion/app/system/internal/data/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newMenuActionResource(db *gorm.DB) menuActionResource {
	_menuActionResource := menuActionResource{}

	_menuActionResource.menuActionResourceDo.UseDB(db)
	_menuActionResource.menuActionResourceDo.UseModel(&model.MenuActionResource{})

	tableName := _menuActionResource.menuActionResourceDo.TableName()
	_menuActionResource.ALL = field.NewField(tableName, "*")
	_menuActionResource.ID = field.NewUint(tableName, "id")
	_menuActionResource.CreatedAt = field.NewTime(tableName, "created_at")
	_menuActionResource.UpdatedAt = field.NewTime(tableName, "updated_at")
	_menuActionResource.DeletedAt = field.NewField(tableName, "deleted_at")
	_menuActionResource.ActionID = field.NewUint64(tableName, "action_id")
	_menuActionResource.Method = field.NewString(tableName, "method")
	_menuActionResource.Path = field.NewString(tableName, "path")

	_menuActionResource.fillFieldMap()

	return _menuActionResource
}

type menuActionResource struct {
	menuActionResourceDo menuActionResourceDo

	ALL       field.Field
	ID        field.Uint
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field
	ActionID  field.Uint64
	Method    field.String
	Path      field.String

	fieldMap map[string]field.Expr
}

func (m menuActionResource) Table(newTableName string) *menuActionResource {
	m.menuActionResourceDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m menuActionResource) As(alias string) *menuActionResource {
	m.menuActionResourceDo.DO = *(m.menuActionResourceDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *menuActionResource) updateTableName(table string) *menuActionResource {
	m.ALL = field.NewField(table, "*")
	m.ID = field.NewUint(table, "id")
	m.CreatedAt = field.NewTime(table, "created_at")
	m.UpdatedAt = field.NewTime(table, "updated_at")
	m.DeletedAt = field.NewField(table, "deleted_at")
	m.ActionID = field.NewUint64(table, "action_id")
	m.Method = field.NewString(table, "method")
	m.Path = field.NewString(table, "path")

	m.fillFieldMap()

	return m
}

func (m *menuActionResource) WithContext(ctx context.Context) *menuActionResourceDo {
	return m.menuActionResourceDo.WithContext(ctx)
}

func (m menuActionResource) TableName() string { return m.menuActionResourceDo.TableName() }

func (m *menuActionResource) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *menuActionResource) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 7)
	m.fieldMap["id"] = m.ID
	m.fieldMap["created_at"] = m.CreatedAt
	m.fieldMap["updated_at"] = m.UpdatedAt
	m.fieldMap["deleted_at"] = m.DeletedAt
	m.fieldMap["action_id"] = m.ActionID
	m.fieldMap["method"] = m.Method
	m.fieldMap["path"] = m.Path
}

func (m menuActionResource) clone(db *gorm.DB) menuActionResource {
	m.menuActionResourceDo.ReplaceDB(db)
	return m
}

type menuActionResourceDo struct{ gen.DO }

func (m menuActionResourceDo) Debug() *menuActionResourceDo {
	return m.withDO(m.DO.Debug())
}

func (m menuActionResourceDo) WithContext(ctx context.Context) *menuActionResourceDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m menuActionResourceDo) Clauses(conds ...clause.Expression) *menuActionResourceDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m menuActionResourceDo) Returning(value interface{}, columns ...string) *menuActionResourceDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m menuActionResourceDo) Not(conds ...gen.Condition) *menuActionResourceDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m menuActionResourceDo) Or(conds ...gen.Condition) *menuActionResourceDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m menuActionResourceDo) Select(conds ...field.Expr) *menuActionResourceDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m menuActionResourceDo) Where(conds ...gen.Condition) *menuActionResourceDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m menuActionResourceDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *menuActionResourceDo {
	return m.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (m menuActionResourceDo) Order(conds ...field.Expr) *menuActionResourceDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m menuActionResourceDo) Distinct(cols ...field.Expr) *menuActionResourceDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m menuActionResourceDo) Omit(cols ...field.Expr) *menuActionResourceDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m menuActionResourceDo) Join(table schema.Tabler, on ...field.Expr) *menuActionResourceDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m menuActionResourceDo) LeftJoin(table schema.Tabler, on ...field.Expr) *menuActionResourceDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m menuActionResourceDo) RightJoin(table schema.Tabler, on ...field.Expr) *menuActionResourceDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m menuActionResourceDo) Group(cols ...field.Expr) *menuActionResourceDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m menuActionResourceDo) Having(conds ...gen.Condition) *menuActionResourceDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m menuActionResourceDo) Limit(limit int) *menuActionResourceDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m menuActionResourceDo) Offset(offset int) *menuActionResourceDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m menuActionResourceDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *menuActionResourceDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m menuActionResourceDo) Unscoped() *menuActionResourceDo {
	return m.withDO(m.DO.Unscoped())
}

func (m menuActionResourceDo) Create(values ...*model.MenuActionResource) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m menuActionResourceDo) CreateInBatches(values []*model.MenuActionResource, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m menuActionResourceDo) Save(values ...*model.MenuActionResource) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m menuActionResourceDo) First() (*model.MenuActionResource, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.MenuActionResource), nil
	}
}

func (m menuActionResourceDo) Take() (*model.MenuActionResource, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.MenuActionResource), nil
	}
}

func (m menuActionResourceDo) Last() (*model.MenuActionResource, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.MenuActionResource), nil
	}
}

func (m menuActionResourceDo) Find() ([]*model.MenuActionResource, error) {
	result, err := m.DO.Find()
	return result.([]*model.MenuActionResource), err
}

func (m menuActionResourceDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MenuActionResource, err error) {
	buf := make([]*model.MenuActionResource, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m menuActionResourceDo) FindInBatches(result *[]*model.MenuActionResource, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m menuActionResourceDo) Attrs(attrs ...field.AssignExpr) *menuActionResourceDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m menuActionResourceDo) Assign(attrs ...field.AssignExpr) *menuActionResourceDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m menuActionResourceDo) Joins(field field.RelationField) *menuActionResourceDo {
	return m.withDO(m.DO.Joins(field))
}

func (m menuActionResourceDo) Preload(field field.RelationField) *menuActionResourceDo {
	return m.withDO(m.DO.Preload(field))
}

func (m menuActionResourceDo) FirstOrInit() (*model.MenuActionResource, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.MenuActionResource), nil
	}
}

func (m menuActionResourceDo) FirstOrCreate() (*model.MenuActionResource, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.MenuActionResource), nil
	}
}

func (m menuActionResourceDo) FindByPage(offset int, limit int) (result []*model.MenuActionResource, count int64, err error) {
	if limit <= 0 {
		count, err = m.Count()
		return
	}

	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m menuActionResourceDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m *menuActionResourceDo) withDO(do gen.Dao) *menuActionResourceDo {
	m.DO = *do.(*gen.DO)
	return m
}
