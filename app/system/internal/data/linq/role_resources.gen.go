// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package linq

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"kratosx-fashion/app/system/internal/data/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newRoleResource(db *gorm.DB) roleResource {
	_roleResource := roleResource{}

	_roleResource.roleResourceDo.UseDB(db)
	_roleResource.roleResourceDo.UseModel(&model.RoleResource{})

	tableName := _roleResource.roleResourceDo.TableName()
	_roleResource.ALL = field.NewField(tableName, "*")
	_roleResource.ID = field.NewUint(tableName, "id")
	_roleResource.CreatedAt = field.NewTime(tableName, "created_at")
	_roleResource.UpdatedAt = field.NewTime(tableName, "updated_at")
	_roleResource.DeletedAt = field.NewField(tableName, "deleted_at")
	_roleResource.RoleID = field.NewUint64(tableName, "role_id")
	_roleResource.ResourceID = field.NewUint64(tableName, "resource_id")
	_roleResource.Type = field.NewUint8(tableName, "type")

	_roleResource.fillFieldMap()

	return _roleResource
}

type roleResource struct {
	roleResourceDo roleResourceDo

	ALL        field.Field
	ID         field.Uint
	CreatedAt  field.Time
	UpdatedAt  field.Time
	DeletedAt  field.Field
	RoleID     field.Uint64
	ResourceID field.Uint64
	Type       field.Uint8

	fieldMap map[string]field.Expr
}

func (r roleResource) Table(newTableName string) *roleResource {
	r.roleResourceDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r roleResource) As(alias string) *roleResource {
	r.roleResourceDo.DO = *(r.roleResourceDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *roleResource) updateTableName(table string) *roleResource {
	r.ALL = field.NewField(table, "*")
	r.ID = field.NewUint(table, "id")
	r.CreatedAt = field.NewTime(table, "created_at")
	r.UpdatedAt = field.NewTime(table, "updated_at")
	r.DeletedAt = field.NewField(table, "deleted_at")
	r.RoleID = field.NewUint64(table, "role_id")
	r.ResourceID = field.NewUint64(table, "resource_id")
	r.Type = field.NewUint8(table, "type")

	r.fillFieldMap()

	return r
}

func (r *roleResource) WithContext(ctx context.Context) *roleResourceDo {
	return r.roleResourceDo.WithContext(ctx)
}

func (r roleResource) TableName() string { return r.roleResourceDo.TableName() }

func (r *roleResource) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *roleResource) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 7)
	r.fieldMap["id"] = r.ID
	r.fieldMap["created_at"] = r.CreatedAt
	r.fieldMap["updated_at"] = r.UpdatedAt
	r.fieldMap["deleted_at"] = r.DeletedAt
	r.fieldMap["role_id"] = r.RoleID
	r.fieldMap["resource_id"] = r.ResourceID
	r.fieldMap["type"] = r.Type
}

func (r roleResource) clone(db *gorm.DB) roleResource {
	r.roleResourceDo.ReplaceDB(db)
	return r
}

type roleResourceDo struct{ gen.DO }

func (r roleResourceDo) Debug() *roleResourceDo {
	return r.withDO(r.DO.Debug())
}

func (r roleResourceDo) WithContext(ctx context.Context) *roleResourceDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r roleResourceDo) Clauses(conds ...clause.Expression) *roleResourceDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r roleResourceDo) Returning(value interface{}, columns ...string) *roleResourceDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r roleResourceDo) Not(conds ...gen.Condition) *roleResourceDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r roleResourceDo) Or(conds ...gen.Condition) *roleResourceDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r roleResourceDo) Select(conds ...field.Expr) *roleResourceDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r roleResourceDo) Where(conds ...gen.Condition) *roleResourceDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r roleResourceDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *roleResourceDo {
	return r.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (r roleResourceDo) Order(conds ...field.Expr) *roleResourceDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r roleResourceDo) Distinct(cols ...field.Expr) *roleResourceDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r roleResourceDo) Omit(cols ...field.Expr) *roleResourceDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r roleResourceDo) Join(table schema.Tabler, on ...field.Expr) *roleResourceDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r roleResourceDo) LeftJoin(table schema.Tabler, on ...field.Expr) *roleResourceDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r roleResourceDo) RightJoin(table schema.Tabler, on ...field.Expr) *roleResourceDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r roleResourceDo) Group(cols ...field.Expr) *roleResourceDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r roleResourceDo) Having(conds ...gen.Condition) *roleResourceDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r roleResourceDo) Limit(limit int) *roleResourceDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r roleResourceDo) Offset(offset int) *roleResourceDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r roleResourceDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *roleResourceDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r roleResourceDo) Unscoped() *roleResourceDo {
	return r.withDO(r.DO.Unscoped())
}

func (r roleResourceDo) Create(values ...*model.RoleResource) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r roleResourceDo) CreateInBatches(values []*model.RoleResource, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r roleResourceDo) Save(values ...*model.RoleResource) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r roleResourceDo) First() (*model.RoleResource, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.RoleResource), nil
	}
}

func (r roleResourceDo) Take() (*model.RoleResource, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.RoleResource), nil
	}
}

func (r roleResourceDo) Last() (*model.RoleResource, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.RoleResource), nil
	}
}

func (r roleResourceDo) Find() ([]*model.RoleResource, error) {
	result, err := r.DO.Find()
	return result.([]*model.RoleResource), err
}

func (r roleResourceDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.RoleResource, err error) {
	buf := make([]*model.RoleResource, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r roleResourceDo) FindInBatches(result *[]*model.RoleResource, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r roleResourceDo) Attrs(attrs ...field.AssignExpr) *roleResourceDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r roleResourceDo) Assign(attrs ...field.AssignExpr) *roleResourceDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r roleResourceDo) Joins(field field.RelationField) *roleResourceDo {
	return r.withDO(r.DO.Joins(field))
}

func (r roleResourceDo) Preload(field field.RelationField) *roleResourceDo {
	return r.withDO(r.DO.Preload(field))
}

func (r roleResourceDo) FirstOrInit() (*model.RoleResource, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.RoleResource), nil
	}
}

func (r roleResourceDo) FirstOrCreate() (*model.RoleResource, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.RoleResource), nil
	}
}

func (r roleResourceDo) FindByPage(offset int, limit int) (result []*model.RoleResource, count int64, err error) {
	if limit <= 0 {
		count, err = r.Count()
		return
	}

	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r roleResourceDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r *roleResourceDo) withDO(do gen.Dao) *roleResourceDo {
	r.DO = *do.(*gen.DO)
	return r
}
