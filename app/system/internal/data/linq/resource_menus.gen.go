// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package linq

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"kratosx-fashion/app/system/internal/data/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newResourceMenu(db *gorm.DB) resourceMenu {
	_resourceMenu := resourceMenu{}

	_resourceMenu.resourceMenuDo.UseDB(db)
	_resourceMenu.resourceMenuDo.UseModel(&model.ResourceMenu{})

	tableName := _resourceMenu.resourceMenuDo.TableName()
	_resourceMenu.ALL = field.NewField(tableName, "*")
	_resourceMenu.ID = field.NewUint(tableName, "id")
	_resourceMenu.CreatedAt = field.NewTime(tableName, "created_at")
	_resourceMenu.UpdatedAt = field.NewTime(tableName, "updated_at")
	_resourceMenu.DeletedAt = field.NewField(tableName, "deleted_at")
	_resourceMenu.Name = field.NewString(tableName, "name")
	_resourceMenu.Path = field.NewString(tableName, "path")
	_resourceMenu.Component = field.NewString(tableName, "component")
	_resourceMenu.ParentID = field.NewUint(tableName, "parent_id")
	_resourceMenu.Locale = field.NewString(tableName, "locale")
	_resourceMenu.RequireAuth = field.NewUint8(tableName, "require_auth")
	_resourceMenu.Icon = field.NewString(tableName, "icon")
	_resourceMenu.Order = field.NewUint32(tableName, "order")
	_resourceMenu.HideInMenu = field.NewUint8(tableName, "hide_in_menu")
	_resourceMenu.NoAffix = field.NewUint8(tableName, "no_affix")
	_resourceMenu.IgnoreCache = field.NewUint8(tableName, "ignore_cache")
	_resourceMenu.Actions = field.NewString(tableName, "actions")

	_resourceMenu.fillFieldMap()

	return _resourceMenu
}

type resourceMenu struct {
	resourceMenuDo resourceMenuDo

	ALL         field.Field
	ID          field.Uint
	CreatedAt   field.Time
	UpdatedAt   field.Time
	DeletedAt   field.Field
	Name        field.String
	Path        field.String
	Component   field.String
	ParentID    field.Uint
	Locale      field.String
	RequireAuth field.Uint8
	Icon        field.String
	Order       field.Uint32
	HideInMenu  field.Uint8
	NoAffix     field.Uint8
	IgnoreCache field.Uint8
	Actions     field.String

	fieldMap map[string]field.Expr
}

func (r resourceMenu) Table(newTableName string) *resourceMenu {
	r.resourceMenuDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r resourceMenu) As(alias string) *resourceMenu {
	r.resourceMenuDo.DO = *(r.resourceMenuDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *resourceMenu) updateTableName(table string) *resourceMenu {
	r.ALL = field.NewField(table, "*")
	r.ID = field.NewUint(table, "id")
	r.CreatedAt = field.NewTime(table, "created_at")
	r.UpdatedAt = field.NewTime(table, "updated_at")
	r.DeletedAt = field.NewField(table, "deleted_at")
	r.Name = field.NewString(table, "name")
	r.Path = field.NewString(table, "path")
	r.Component = field.NewString(table, "component")
	r.ParentID = field.NewUint(table, "parent_id")
	r.Locale = field.NewString(table, "locale")
	r.RequireAuth = field.NewUint8(table, "require_auth")
	r.Icon = field.NewString(table, "icon")
	r.Order = field.NewUint32(table, "order")
	r.HideInMenu = field.NewUint8(table, "hide_in_menu")
	r.NoAffix = field.NewUint8(table, "no_affix")
	r.IgnoreCache = field.NewUint8(table, "ignore_cache")
	r.Actions = field.NewString(table, "actions")

	r.fillFieldMap()

	return r
}

func (r *resourceMenu) WithContext(ctx context.Context) *resourceMenuDo {
	return r.resourceMenuDo.WithContext(ctx)
}

func (r resourceMenu) TableName() string { return r.resourceMenuDo.TableName() }

func (r *resourceMenu) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *resourceMenu) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 16)
	r.fieldMap["id"] = r.ID
	r.fieldMap["created_at"] = r.CreatedAt
	r.fieldMap["updated_at"] = r.UpdatedAt
	r.fieldMap["deleted_at"] = r.DeletedAt
	r.fieldMap["name"] = r.Name
	r.fieldMap["path"] = r.Path
	r.fieldMap["component"] = r.Component
	r.fieldMap["parent_id"] = r.ParentID
	r.fieldMap["locale"] = r.Locale
	r.fieldMap["require_auth"] = r.RequireAuth
	r.fieldMap["icon"] = r.Icon
	r.fieldMap["order"] = r.Order
	r.fieldMap["hide_in_menu"] = r.HideInMenu
	r.fieldMap["no_affix"] = r.NoAffix
	r.fieldMap["ignore_cache"] = r.IgnoreCache
	r.fieldMap["actions"] = r.Actions
}

func (r resourceMenu) clone(db *gorm.DB) resourceMenu {
	r.resourceMenuDo.ReplaceDB(db)
	return r
}

type resourceMenuDo struct{ gen.DO }

func (r resourceMenuDo) Debug() *resourceMenuDo {
	return r.withDO(r.DO.Debug())
}

func (r resourceMenuDo) WithContext(ctx context.Context) *resourceMenuDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r resourceMenuDo) Clauses(conds ...clause.Expression) *resourceMenuDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r resourceMenuDo) Returning(value interface{}, columns ...string) *resourceMenuDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r resourceMenuDo) Not(conds ...gen.Condition) *resourceMenuDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r resourceMenuDo) Or(conds ...gen.Condition) *resourceMenuDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r resourceMenuDo) Select(conds ...field.Expr) *resourceMenuDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r resourceMenuDo) Where(conds ...gen.Condition) *resourceMenuDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r resourceMenuDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *resourceMenuDo {
	return r.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (r resourceMenuDo) Order(conds ...field.Expr) *resourceMenuDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r resourceMenuDo) Distinct(cols ...field.Expr) *resourceMenuDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r resourceMenuDo) Omit(cols ...field.Expr) *resourceMenuDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r resourceMenuDo) Join(table schema.Tabler, on ...field.Expr) *resourceMenuDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r resourceMenuDo) LeftJoin(table schema.Tabler, on ...field.Expr) *resourceMenuDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r resourceMenuDo) RightJoin(table schema.Tabler, on ...field.Expr) *resourceMenuDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r resourceMenuDo) Group(cols ...field.Expr) *resourceMenuDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r resourceMenuDo) Having(conds ...gen.Condition) *resourceMenuDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r resourceMenuDo) Limit(limit int) *resourceMenuDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r resourceMenuDo) Offset(offset int) *resourceMenuDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r resourceMenuDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *resourceMenuDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r resourceMenuDo) Unscoped() *resourceMenuDo {
	return r.withDO(r.DO.Unscoped())
}

func (r resourceMenuDo) Create(values ...*model.ResourceMenu) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r resourceMenuDo) CreateInBatches(values []*model.ResourceMenu, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r resourceMenuDo) Save(values ...*model.ResourceMenu) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r resourceMenuDo) First() (*model.ResourceMenu, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ResourceMenu), nil
	}
}

func (r resourceMenuDo) Take() (*model.ResourceMenu, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ResourceMenu), nil
	}
}

func (r resourceMenuDo) Last() (*model.ResourceMenu, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ResourceMenu), nil
	}
}

func (r resourceMenuDo) Find() ([]*model.ResourceMenu, error) {
	result, err := r.DO.Find()
	return result.([]*model.ResourceMenu), err
}

func (r resourceMenuDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ResourceMenu, err error) {
	buf := make([]*model.ResourceMenu, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r resourceMenuDo) FindInBatches(result *[]*model.ResourceMenu, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r resourceMenuDo) Attrs(attrs ...field.AssignExpr) *resourceMenuDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r resourceMenuDo) Assign(attrs ...field.AssignExpr) *resourceMenuDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r resourceMenuDo) Joins(field field.RelationField) *resourceMenuDo {
	return r.withDO(r.DO.Joins(field))
}

func (r resourceMenuDo) Preload(field field.RelationField) *resourceMenuDo {
	return r.withDO(r.DO.Preload(field))
}

func (r resourceMenuDo) FirstOrInit() (*model.ResourceMenu, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ResourceMenu), nil
	}
}

func (r resourceMenuDo) FirstOrCreate() (*model.ResourceMenu, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ResourceMenu), nil
	}
}

func (r resourceMenuDo) FindByPage(offset int, limit int) (result []*model.ResourceMenu, count int64, err error) {
	if limit <= 0 {
		count, err = r.Count()
		return
	}

	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r resourceMenuDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r *resourceMenuDo) withDO(do gen.Dao) *resourceMenuDo {
	r.DO = *do.(*gen.DO)
	return r
}
