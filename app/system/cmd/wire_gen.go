// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"kratosx-fashion/app/system/internal/biz"
	"kratosx-fashion/app/system/internal/conf"
	"kratosx-fashion/app/system/internal/data"
	"kratosx-fashion/app/system/internal/middleware"
	"kratosx-fashion/app/system/internal/server"
	"kratosx-fashion/app/system/internal/service"
)

// Injectors from wire.go:

// initApp init kratos application.
func initApp(confServer *conf.Server, registry *conf.Registry, confData *conf.Data, jwt *conf.JWT, logger *conf.Logger) (*kratos.App, func(), error) {
	logLogger := data.NewLogger(logger)
	db := data.NewDB(confData, logLogger)
	client := data.NewRedis(confData, logLogger)
	dataData, cleanup, err := data.NewData(confData, logLogger, db, client)
	if err != nil {
		return nil, nil, err
	}
	userRepo := data.NewUserRepo(dataData, logLogger)
	loginLogRepo := data.NewLoginLogRepo(dataData, logLogger)
	captchaRepo := data.NewCaptchaRepo(logLogger)
	fiberMiddleware := middleware.NewJwtService(jwt, client, logLogger)
	publicUsecase := biz.NewPublicUsecase(userRepo, loginLogRepo, captchaRepo, fiberMiddleware, logLogger)
	pubService := service.NewPubService(publicUsecase, logLogger)
	userRoleRepo := data.NewUserRoleRepo(dataData, logLogger)
	userUsecase := biz.NewUserUsecase(userRepo, userRoleRepo, logLogger)
	userService := service.NewUserService(userUsecase, logLogger)
	roleRepo := data.NewRoleRepo(dataData, logLogger)
	roleMenuRepo := data.NewRoleMenuRepo(dataData, logLogger)
	roleUsecase := biz.NewRoleUsecase(roleRepo, roleMenuRepo, logLogger)
	roleService := service.NewRoleService(roleUsecase, logLogger)
	menuRepo := data.NewMenuRepo(dataData, logLogger)
	menuActionRepo := data.NewMenuActionRepo(dataData, logLogger)
	menuActionResourceRepo := data.NewMenuActionResourceRepo(dataData, logLogger)
	menuUsecase := biz.NewMenuUsecase(menuRepo, menuActionRepo, menuActionResourceRepo, logLogger)
	menuService := service.NewMenuService(menuUsecase, logLogger)
	xhttpServer := server.NewHTTPServer(confServer, pubService, userService, roleService, menuService, logLogger)
	grpcServer := server.NewGRPCServer(confServer, pubService, userService, roleService, menuService, logLogger)
	registrar := data.NewRegistrar(registry)
	app := newApp(logLogger, xhttpServer, grpcServer, registrar)
	return app, func() {
		cleanup()
	}, nil
}
