// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
)

func Use(db *gorm.DB) *Query {
	return &Query{
		db:                 db,
		LoginLog:           newLoginLog(db),
		Menu:               newMenu(db),
		MenuAction:         newMenuAction(db),
		MenuActionResource: newMenuActionResource(db),
		Role:               newRole(db),
		RoleMenu:           newRoleMenu(db),
		User:               newUser(db),
		UserRole:           newUserRole(db),
	}
}

type Query struct {
	db *gorm.DB

	LoginLog           loginLog
	Menu               menu
	MenuAction         menuAction
	MenuActionResource menuActionResource
	Role               role
	RoleMenu           roleMenu
	User               user
	UserRole           userRole
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                 db,
		LoginLog:           q.LoginLog.clone(db),
		Menu:               q.Menu.clone(db),
		MenuAction:         q.MenuAction.clone(db),
		MenuActionResource: q.MenuActionResource.clone(db),
		Role:               q.Role.clone(db),
		RoleMenu:           q.RoleMenu.clone(db),
		User:               q.User.clone(db),
		UserRole:           q.UserRole.clone(db),
	}
}

type queryCtx struct {
	LoginLog           loginLogDo
	Menu               menuDo
	MenuAction         menuActionDo
	MenuActionResource menuActionResourceDo
	Role               roleDo
	RoleMenu           roleMenuDo
	User               userDo
	UserRole           userRoleDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		LoginLog:           *q.LoginLog.WithContext(ctx),
		Menu:               *q.Menu.WithContext(ctx),
		MenuAction:         *q.MenuAction.WithContext(ctx),
		MenuActionResource: *q.MenuActionResource.WithContext(ctx),
		Role:               *q.Role.WithContext(ctx),
		RoleMenu:           *q.RoleMenu.WithContext(ctx),
		User:               *q.User.WithContext(ctx),
		UserRole:           *q.UserRole.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	return &QueryTx{q.clone(q.db.Begin(opts...))}
}

type QueryTx struct{ *Query }

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
