// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"kratosx-fashion/app/system/internal/biz"
	"kratosx-fashion/app/system/internal/conf"
	"kratosx-fashion/app/system/internal/data"
	"kratosx-fashion/app/system/internal/middleware"
	"kratosx-fashion/app/system/internal/server"
	"kratosx-fashion/app/system/internal/service"
)

// Injectors from wire.go:

// initApp init kratos application.
func initApp(confServer *conf.Server, registry *conf.Registry, storage *conf.Storage, confData *conf.Data, jwt *conf.JWT, logger *conf.Logger) (*kratos.App, func(), error) {
	logLogger := data.NewLogger(logger)
	db := data.NewDB(confData, logLogger)
	client := data.NewRedis(confData, logLogger)
	dataData, cleanup, err := data.NewData(confData, logLogger, db, client)
	if err != nil {
		return nil, nil, err
	}
	userRepo := data.NewUserRepo(dataData, logLogger)
	loginLogRepo := data.NewLoginLogRepo(dataData, logLogger)
	captchaRepo := data.NewCaptchaRepo(logLogger)
	jwtService := middleware.NewJwtService(jwt, client, logLogger)
	storageStorage := data.NewStorage(storage)
	publicUsecase := biz.NewPublicUsecase(userRepo, loginLogRepo, captchaRepo, jwtService, storageStorage, logLogger)
	pubService := service.NewPubService(publicUsecase, logLogger)
	userService := service.NewUserService()
	roleService := service.NewRoleService()
	resourceService := service.NewResourceService()
	xhttpServer := server.NewHTTPServer(confServer, pubService, userService, roleService, resourceService, logLogger)
	registrar := data.NewRegistrar(registry)
	app := newApp(logLogger, xhttpServer, registrar)
	return app, func() {
		cleanup()
	}, nil
}
