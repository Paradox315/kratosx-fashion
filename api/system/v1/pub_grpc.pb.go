// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.0--rc1
// source: api/system/v1/pub.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PubClient is the client API for Pub service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PubClient interface {
	Generate(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*CaptchaReply, error)
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterReply, error)
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginReply, error)
	Logout(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*EmptyReply, error)
	RetrievePwd(ctx context.Context, in *RetrieveRequest, opts ...grpc.CallOption) (*EmptyReply, error)
}

type pubClient struct {
	cc grpc.ClientConnInterface
}

func NewPubClient(cc grpc.ClientConnInterface) PubClient {
	return &pubClient{cc}
}

func (c *pubClient) Generate(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*CaptchaReply, error) {
	out := new(CaptchaReply)
	err := c.cc.Invoke(ctx, "/api.system.v1.Pub/Generate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pubClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterReply, error) {
	out := new(RegisterReply)
	err := c.cc.Invoke(ctx, "/api.system.v1.Pub/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pubClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginReply, error) {
	out := new(LoginReply)
	err := c.cc.Invoke(ctx, "/api.system.v1.Pub/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pubClient) Logout(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*EmptyReply, error) {
	out := new(EmptyReply)
	err := c.cc.Invoke(ctx, "/api.system.v1.Pub/Logout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pubClient) RetrievePwd(ctx context.Context, in *RetrieveRequest, opts ...grpc.CallOption) (*EmptyReply, error) {
	out := new(EmptyReply)
	err := c.cc.Invoke(ctx, "/api.system.v1.Pub/RetrievePwd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PubServer is the server API for Pub service.
// All implementations must embed UnimplementedPubServer
// for forward compatibility
type PubServer interface {
	Generate(context.Context, *EmptyRequest) (*CaptchaReply, error)
	Register(context.Context, *RegisterRequest) (*RegisterReply, error)
	Login(context.Context, *LoginRequest) (*LoginReply, error)
	Logout(context.Context, *EmptyRequest) (*EmptyReply, error)
	RetrievePwd(context.Context, *RetrieveRequest) (*EmptyReply, error)
	mustEmbedUnimplementedPubServer()
}

// UnimplementedPubServer must be embedded to have forward compatible implementations.
type UnimplementedPubServer struct {
}

func (UnimplementedPubServer) Generate(context.Context, *EmptyRequest) (*CaptchaReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Generate not implemented")
}
func (UnimplementedPubServer) Register(context.Context, *RegisterRequest) (*RegisterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedPubServer) Login(context.Context, *LoginRequest) (*LoginReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedPubServer) Logout(context.Context, *EmptyRequest) (*EmptyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedPubServer) RetrievePwd(context.Context, *RetrieveRequest) (*EmptyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrievePwd not implemented")
}
func (UnimplementedPubServer) mustEmbedUnimplementedPubServer() {}

// UnsafePubServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PubServer will
// result in compilation errors.
type UnsafePubServer interface {
	mustEmbedUnimplementedPubServer()
}

func RegisterPubServer(s grpc.ServiceRegistrar, srv PubServer) {
	s.RegisterService(&Pub_ServiceDesc, srv)
}

func _Pub_Generate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PubServer).Generate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.system.v1.Pub/Generate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PubServer).Generate(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pub_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PubServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.system.v1.Pub/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PubServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pub_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PubServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.system.v1.Pub/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PubServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pub_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PubServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.system.v1.Pub/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PubServer).Logout(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pub_RetrievePwd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PubServer).RetrievePwd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.system.v1.Pub/RetrievePwd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PubServer).RetrievePwd(ctx, req.(*RetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Pub_ServiceDesc is the grpc.ServiceDesc for Pub service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Pub_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.system.v1.Pub",
	HandlerType: (*PubServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Generate",
			Handler:    _Pub_Generate_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _Pub_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _Pub_Login_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _Pub_Logout_Handler,
		},
		{
			MethodName: "RetrievePwd",
			Handler:    _Pub_RetrievePwd_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/system/v1/pub.proto",
}
