// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package linq

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"kratosx-fashion/app/system/internal/data/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newResourceAction(db *gorm.DB) resourceAction {
	_resourceAction := resourceAction{}

	_resourceAction.resourceActionDo.UseDB(db)
	_resourceAction.resourceActionDo.UseModel(&model.ResourceAction{})

	tableName := _resourceAction.resourceActionDo.TableName()
	_resourceAction.ALL = field.NewField(tableName, "*")
	_resourceAction.ID = field.NewUint(tableName, "id")
	_resourceAction.CreatedAt = field.NewTime(tableName, "created_at")
	_resourceAction.UpdatedAt = field.NewTime(tableName, "updated_at")
	_resourceAction.DeletedAt = field.NewField(tableName, "deleted_at")
	_resourceAction.MenuID = field.NewUint64(tableName, "menu_id")
	_resourceAction.Name = field.NewString(tableName, "name")
	_resourceAction.Code = field.NewString(tableName, "code")

	_resourceAction.fillFieldMap()

	return _resourceAction
}

type resourceAction struct {
	resourceActionDo resourceActionDo

	ALL       field.Field
	ID        field.Uint
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field
	MenuID    field.Uint64
	Name      field.String
	Code      field.String

	fieldMap map[string]field.Expr
}

func (r resourceAction) Table(newTableName string) *resourceAction {
	r.resourceActionDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r resourceAction) As(alias string) *resourceAction {
	r.resourceActionDo.DO = *(r.resourceActionDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *resourceAction) updateTableName(table string) *resourceAction {
	r.ALL = field.NewField(table, "*")
	r.ID = field.NewUint(table, "id")
	r.CreatedAt = field.NewTime(table, "created_at")
	r.UpdatedAt = field.NewTime(table, "updated_at")
	r.DeletedAt = field.NewField(table, "deleted_at")
	r.MenuID = field.NewUint64(table, "menu_id")
	r.Name = field.NewString(table, "name")
	r.Code = field.NewString(table, "code")

	r.fillFieldMap()

	return r
}

func (r *resourceAction) WithContext(ctx context.Context) *resourceActionDo {
	return r.resourceActionDo.WithContext(ctx)
}

func (r resourceAction) TableName() string { return r.resourceActionDo.TableName() }

func (r *resourceAction) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *resourceAction) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 7)
	r.fieldMap["id"] = r.ID
	r.fieldMap["created_at"] = r.CreatedAt
	r.fieldMap["updated_at"] = r.UpdatedAt
	r.fieldMap["deleted_at"] = r.DeletedAt
	r.fieldMap["menu_id"] = r.MenuID
	r.fieldMap["name"] = r.Name
	r.fieldMap["code"] = r.Code
}

func (r resourceAction) clone(db *gorm.DB) resourceAction {
	r.resourceActionDo.ReplaceDB(db)
	return r
}

type resourceActionDo struct{ gen.DO }

func (r resourceActionDo) Debug() *resourceActionDo {
	return r.withDO(r.DO.Debug())
}

func (r resourceActionDo) WithContext(ctx context.Context) *resourceActionDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r resourceActionDo) Clauses(conds ...clause.Expression) *resourceActionDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r resourceActionDo) Returning(value interface{}, columns ...string) *resourceActionDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r resourceActionDo) Not(conds ...gen.Condition) *resourceActionDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r resourceActionDo) Or(conds ...gen.Condition) *resourceActionDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r resourceActionDo) Select(conds ...field.Expr) *resourceActionDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r resourceActionDo) Where(conds ...gen.Condition) *resourceActionDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r resourceActionDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *resourceActionDo {
	return r.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (r resourceActionDo) Order(conds ...field.Expr) *resourceActionDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r resourceActionDo) Distinct(cols ...field.Expr) *resourceActionDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r resourceActionDo) Omit(cols ...field.Expr) *resourceActionDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r resourceActionDo) Join(table schema.Tabler, on ...field.Expr) *resourceActionDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r resourceActionDo) LeftJoin(table schema.Tabler, on ...field.Expr) *resourceActionDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r resourceActionDo) RightJoin(table schema.Tabler, on ...field.Expr) *resourceActionDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r resourceActionDo) Group(cols ...field.Expr) *resourceActionDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r resourceActionDo) Having(conds ...gen.Condition) *resourceActionDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r resourceActionDo) Limit(limit int) *resourceActionDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r resourceActionDo) Offset(offset int) *resourceActionDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r resourceActionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *resourceActionDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r resourceActionDo) Unscoped() *resourceActionDo {
	return r.withDO(r.DO.Unscoped())
}

func (r resourceActionDo) Create(values ...*model.ResourceAction) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r resourceActionDo) CreateInBatches(values []*model.ResourceAction, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r resourceActionDo) Save(values ...*model.ResourceAction) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r resourceActionDo) First() (*model.ResourceAction, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ResourceAction), nil
	}
}

func (r resourceActionDo) Take() (*model.ResourceAction, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ResourceAction), nil
	}
}

func (r resourceActionDo) Last() (*model.ResourceAction, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ResourceAction), nil
	}
}

func (r resourceActionDo) Find() ([]*model.ResourceAction, error) {
	result, err := r.DO.Find()
	return result.([]*model.ResourceAction), err
}

func (r resourceActionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ResourceAction, err error) {
	buf := make([]*model.ResourceAction, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r resourceActionDo) FindInBatches(result *[]*model.ResourceAction, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r resourceActionDo) Attrs(attrs ...field.AssignExpr) *resourceActionDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r resourceActionDo) Assign(attrs ...field.AssignExpr) *resourceActionDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r resourceActionDo) Joins(field field.RelationField) *resourceActionDo {
	return r.withDO(r.DO.Joins(field))
}

func (r resourceActionDo) Preload(field field.RelationField) *resourceActionDo {
	return r.withDO(r.DO.Preload(field))
}

func (r resourceActionDo) FirstOrInit() (*model.ResourceAction, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ResourceAction), nil
	}
}

func (r resourceActionDo) FirstOrCreate() (*model.ResourceAction, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ResourceAction), nil
	}
}

func (r resourceActionDo) FindByPage(offset int, limit int) (result []*model.ResourceAction, count int64, err error) {
	if limit <= 0 {
		count, err = r.Count()
		return
	}

	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r resourceActionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r *resourceActionDo) withDO(do gen.Dao) *resourceActionDo {
	r.DO = *do.(*gen.DO)
	return r
}
