// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"kratosx-fashion/app/system/internal/data/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newMenuAction(db *gorm.DB) menuAction {
	_menuAction := menuAction{}

	_menuAction.menuActionDo.UseDB(db)
	_menuAction.menuActionDo.UseModel(&model.MenuAction{})

	tableName := _menuAction.menuActionDo.TableName()
	_menuAction.ALL = field.NewField(tableName, "*")
	_menuAction.ID = field.NewUint(tableName, "id")
	_menuAction.CreatedAt = field.NewTime(tableName, "created_at")
	_menuAction.UpdatedAt = field.NewTime(tableName, "updated_at")
	_menuAction.DeletedAt = field.NewField(tableName, "deleted_at")
	_menuAction.MenuID = field.NewUint64(tableName, "menu_id")
	_menuAction.Name = field.NewString(tableName, "name")
	_menuAction.MenuActionResources = menuActionMenuActionResources{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("MenuActionResources", "model.MenuActionResource"),
	}

	_menuAction.fillFieldMap()

	return _menuAction
}

type menuAction struct {
	menuActionDo menuActionDo

	ALL                 field.Field
	ID                  field.Uint
	CreatedAt           field.Time
	UpdatedAt           field.Time
	DeletedAt           field.Field
	MenuID              field.Uint64
	Name                field.String
	MenuActionResources menuActionMenuActionResources

	fieldMap map[string]field.Expr
}

func (m menuAction) Table(newTableName string) *menuAction {
	m.menuActionDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m menuAction) As(alias string) *menuAction {
	m.menuActionDo.DO = *(m.menuActionDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *menuAction) updateTableName(table string) *menuAction {
	m.ALL = field.NewField(table, "*")
	m.ID = field.NewUint(table, "id")
	m.CreatedAt = field.NewTime(table, "created_at")
	m.UpdatedAt = field.NewTime(table, "updated_at")
	m.DeletedAt = field.NewField(table, "deleted_at")
	m.MenuID = field.NewUint64(table, "menu_id")
	m.Name = field.NewString(table, "name")

	m.fillFieldMap()

	return m
}

func (m *menuAction) WithContext(ctx context.Context) *menuActionDo {
	return m.menuActionDo.WithContext(ctx)
}

func (m menuAction) TableName() string { return m.menuActionDo.TableName() }

func (m *menuAction) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *menuAction) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 7)
	m.fieldMap["id"] = m.ID
	m.fieldMap["created_at"] = m.CreatedAt
	m.fieldMap["updated_at"] = m.UpdatedAt
	m.fieldMap["deleted_at"] = m.DeletedAt
	m.fieldMap["menu_id"] = m.MenuID
	m.fieldMap["name"] = m.Name

}

func (m menuAction) clone(db *gorm.DB) menuAction {
	m.menuActionDo.ReplaceDB(db)
	return m
}

type menuActionMenuActionResources struct {
	db *gorm.DB

	field.RelationField
}

func (a menuActionMenuActionResources) Where(conds ...field.Expr) *menuActionMenuActionResources {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a menuActionMenuActionResources) WithContext(ctx context.Context) *menuActionMenuActionResources {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a menuActionMenuActionResources) Model(m *model.MenuAction) *menuActionMenuActionResourcesTx {
	return &menuActionMenuActionResourcesTx{a.db.Model(m).Association(a.Name())}
}

type menuActionMenuActionResourcesTx struct{ tx *gorm.Association }

func (a menuActionMenuActionResourcesTx) Find() (result *model.MenuActionResource, err error) {
	return result, a.tx.Find(&result)
}

func (a menuActionMenuActionResourcesTx) Append(values ...*model.MenuActionResource) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a menuActionMenuActionResourcesTx) Replace(values ...*model.MenuActionResource) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a menuActionMenuActionResourcesTx) Delete(values ...*model.MenuActionResource) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a menuActionMenuActionResourcesTx) Clear() error {
	return a.tx.Clear()
}

func (a menuActionMenuActionResourcesTx) Count() int64 {
	return a.tx.Count()
}

type menuActionDo struct{ gen.DO }

func (m menuActionDo) Debug() *menuActionDo {
	return m.withDO(m.DO.Debug())
}

func (m menuActionDo) WithContext(ctx context.Context) *menuActionDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m menuActionDo) Clauses(conds ...clause.Expression) *menuActionDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m menuActionDo) Returning(value interface{}, columns ...string) *menuActionDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m menuActionDo) Not(conds ...gen.Condition) *menuActionDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m menuActionDo) Or(conds ...gen.Condition) *menuActionDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m menuActionDo) Select(conds ...field.Expr) *menuActionDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m menuActionDo) Where(conds ...gen.Condition) *menuActionDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m menuActionDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *menuActionDo {
	return m.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (m menuActionDo) Order(conds ...field.Expr) *menuActionDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m menuActionDo) Distinct(cols ...field.Expr) *menuActionDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m menuActionDo) Omit(cols ...field.Expr) *menuActionDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m menuActionDo) Join(table schema.Tabler, on ...field.Expr) *menuActionDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m menuActionDo) LeftJoin(table schema.Tabler, on ...field.Expr) *menuActionDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m menuActionDo) RightJoin(table schema.Tabler, on ...field.Expr) *menuActionDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m menuActionDo) Group(cols ...field.Expr) *menuActionDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m menuActionDo) Having(conds ...gen.Condition) *menuActionDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m menuActionDo) Limit(limit int) *menuActionDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m menuActionDo) Offset(offset int) *menuActionDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m menuActionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *menuActionDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m menuActionDo) Unscoped() *menuActionDo {
	return m.withDO(m.DO.Unscoped())
}

func (m menuActionDo) Create(values ...*model.MenuAction) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m menuActionDo) CreateInBatches(values []*model.MenuAction, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m menuActionDo) Save(values ...*model.MenuAction) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m menuActionDo) First() (*model.MenuAction, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.MenuAction), nil
	}
}

func (m menuActionDo) Take() (*model.MenuAction, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.MenuAction), nil
	}
}

func (m menuActionDo) Last() (*model.MenuAction, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.MenuAction), nil
	}
}

func (m menuActionDo) Find() ([]*model.MenuAction, error) {
	result, err := m.DO.Find()
	return result.([]*model.MenuAction), err
}

func (m menuActionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MenuAction, err error) {
	buf := make([]*model.MenuAction, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m menuActionDo) FindInBatches(result *[]*model.MenuAction, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m menuActionDo) Attrs(attrs ...field.AssignExpr) *menuActionDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m menuActionDo) Assign(attrs ...field.AssignExpr) *menuActionDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m menuActionDo) Joins(field field.RelationField) *menuActionDo {
	return m.withDO(m.DO.Joins(field))
}

func (m menuActionDo) Preload(field field.RelationField) *menuActionDo {
	return m.withDO(m.DO.Preload(field))
}

func (m menuActionDo) FirstOrInit() (*model.MenuAction, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.MenuAction), nil
	}
}

func (m menuActionDo) FirstOrCreate() (*model.MenuAction, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.MenuAction), nil
	}
}

func (m menuActionDo) FindByPage(offset int, limit int) (result []*model.MenuAction, count int64, err error) {
	if limit <= 0 {
		count, err = m.Count()
		return
	}

	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m menuActionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m *menuActionDo) withDO(do gen.Dao) *menuActionDo {
	m.DO = *do.(*gen.DO)
	return m
}
